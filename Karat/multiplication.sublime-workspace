{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"final",
				"final_result_ieee"
			],
			[
				"NRM",
				"NRM_STAGE"
			],
			[
				"over",
				"overflow"
			],
			[
				"ARR",
				"Array_IN_3"
			],
			[
				"Ope",
				"Operand1_W"
			],
			[
				"Da",
				"Data_X"
			],
			[
				"log",
				"logVectorReference"
			],
			[
				"beg",
				"begin\tbegin"
			],
			[
				"ena",
				"enable_Pipeline_input"
			],
			[
				"SGF",
				"SFG_ACTIVE"
			],
			[
				"SHT2",
				"SHT2_ACTIVE"
			],
			[
				"SHT",
				"SHT1_ACTIVE"
			],
			[
				"EXP",
				"EXP_ACTIVE"
			],
			[
				"Theoretical_result_",
				"Theoretical_result_exponent"
			],
			[
				"un",
				"underflow_flag_t"
			],
			[
				"L",
				"L_limit"
			],
			[
				"under",
				"underflow_flag"
			],
			[
				"Sign",
				"Sign1"
			],
			[
				"Ex",
				"Exponent1_EW"
			],
			[
				"dia",
				"display"
			],
			[
				"be",
				"begin\tbegin"
			],
			[
				"M",
				"Mantissa_M"
			],
			[
				"re",
				"reg"
			],
			[
				"SW",
				"SW-1"
			],
			[
				"zero",
				"zero_flag"
			],
			[
				"ZERO",
				"ZERO_FLAG_SHT2"
			],
			[
				"reg",
				"register\t: w bit d register "
			],
			[
				"Comp",
				"Comparator_Less"
			],
			[
				"SWR",
				"SWR-1"
			],
			[
				"Compara",
				"Comparators"
			],
			[
				"Mul",
				"MultiplexTxT"
			],
			[
				"in",
				"include"
			],
			[
				"W",
				"W-2"
			],
			[
				"DMP_exp",
				"DMP_exp_NRM2"
			],
			[
				"EW",
				"EW-1"
			],
			[
				"EWR",
				"EWR-1"
			],
			[
				"LZ",
				"LZD_output"
			],
			[
				"fi",
				"final_result_ieee_o"
			],
			[
				"mux",
				"mux_sel_norm"
			],
			[
				"LZD",
				"LZD_output"
			],
			[
				"ADD",
				"ADD_OVRFLW_SGF"
			],
			[
				"INPUT",
				"INPUT_ACTIVE"
			],
			[
				"d_ff3",
				"d_ff3_LUT_out"
			],
			[
				"d_ff2",
				"d_ff2_Z"
			],
			[
				"para",
				"parameter"
			],
			[
				"rea",
				"ready_cordic"
			],
			[
				"CO",
				"CORDIC_Arch2"
			],
			[
				"al",
				"always\talways"
			]
		]
	},
	"buffers":
	[
		{
			"file": "source/rtl/FPU_Multiplication_Function_v2.v",
			"settings":
			{
				"buffer_size": 8447,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/constrs_1/imports/RTL/Nexys4_Master.xdc",
			"settings":
			{
				"buffer_size": 37288,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/constrs_1/new/Time_Constrains.xdc",
			"settings":
			{
				"buffer_size": 2594,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/FPU_Multiplication_Function.v",
			"settings":
			{
				"buffer_size": 8367,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/FPU_Add_Subtract_Function.v",
			"settings":
			{
				"buffer_size": 12654,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/exp_operation.v",
			"settings":
			{
				"buffer_size": 2050,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Tenth_Phase.v",
			"settings":
			{
				"buffer_size": 2485,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns / 1ps\n//////////////////////////////////////////////////////////////////////////////////\n// Company: \n// Engineer: \n// \n// Create Date:    21:09:39 08/25/2015 \n// Design Name: \n// Module Name:    FSM_Add_Subtract \n// Project Name: \n// Target Devices: \n// Tool versions: \n// Description: \n//\n// Dependencies: \n//\n// Revision: \n// Revision 0.01 - File Created\n// Additional Comments: \n//\n//////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n\n\n\nmodule FSM_Add_Subtract\n\t(\n\t\t//INPUTS\n\t\tinput wire clk, //system clock\n\t\tinput wire rst, //system reset\n\t\tinput wire rst_FSM,\n\t\tinput wire beg_FSM, //Begin Finite State Machine\n\t\t//**REVISAD\n\t\t\n\t//////////////////////////////////////////////////////////////////////////////\n\t\t//Oper_Start_In evaluation signals\n\t\tinput wire zero_flag_i,\n\t\t\n\t\t//Exp_operation evaluation signals\n\t\tinput wire norm_iteration_i,\n\t\t\n\t\t//Barrel_Shifter evaluation signals\n\t\t//None\n\n\t\t//Add_Subt_Sgf evaluation signals\n\t\tinput wire add_overflow_i,\n\n\t\t//LZA evaluation signals\n\t\t//None\n\n\t\t//Deco_round evaluation Signals\n\t\tinput wire round_i,\n\n\t\t//Final_result evaluation signals\n\t\t//None\n\t\t\n\t\t\n\t\t//OUTPUT SIGNALS\n\t\n////////////////////////////////////////////////////////////////////////////////////\t\n\t\t//Oper_Start_In control signals\n\t\toutput wire load_1_o,//Enable input registers\n\t\toutput wire load_2_o,//Enable output registers\n\n\t\t//Exp_operation control signals\n\t\toutput reg load_3_o, //Enable Output registers\n\t\toutput reg load_8_o,\n\t\toutput reg A_S_op_o, //Select operation for exponent normalization(Subt for left shift, Add for right shift)\n\t\n\t\t\n\t\t//Barrel shifter control signals\n\t\toutput reg load_4_o, //Enable Output registers\n\t\toutput reg left_right_o, //Select direction shift (right=0, left=1)\n\t\toutput reg bit_shift_o, //bit input for shifts fills\n\n\t\t\n\t\t//Add_Subt_sgf control signals\n\t\toutput reg load_5_o, //Enables Output registers\n\t\n\t\t\n\t\t//LZA control signals\n\t\toutput reg load_6_o, //Enables Output registers\n\n\t\t//Deco_Round control signals\n\t\t//None\n\n\t\t//Final_Result control signals\n\t\toutput reg load_7_o,\n\t\t\n\t\t///////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\t\t//Multiplexer selector for Exp_operation's OPER_A\n\n\t\toutput reg ctrl_a_o,\n\n\t\t//Multiplexer selector for Exp_operation's OPER_B & Barrel_Shifter's Shift value\n\n\t\toutput reg [1:0] ctrl_b_o,\n\t\toutput reg ctrl_b_load_o,\n\n\t\t//Multiplexer selector for Data shift\n\n\t\toutput reg ctrl_c_o,\n\n\t\t//Multiplexer selector for Add_Subt_Sgf's inputs\n\n\t\toutput reg ctrl_d_o,\n\n\t\t\n\n\t\t\n\t\t\n\t\t//Internal reset signal\n\t\toutput reg rst_int,\n\t\t//Ready  Signal\n\t\toutput reg ready\n\t );\n\n\nlocalparam [3:0] \n//First I'm going to declarate the registers of the first phase of execution\n\t\t\t\t\t start = 4'd0, //This state evaluates the beg_FSM to begin operations\n\n\t\t\t\t     load_oper = 4'd1, //This state enables the registers that contains\n\t\t\t\t\t\t\t\t\t\t\t //both operands and the operator\n\t\t\t\t\t zero_info_state = 4'd2, //Evaluate zero condition\n\n\t\t\t\t\t load_diff_exp = 4'd3, //Enable registers for the exponent on the small value normalization and for the first\n\t\t\t\t\t \t\t\t\t\t\t//result normalization\n\t\t\t\t\t \t\t\t\t\t\t\n\t\t\t\t\t extra1_64= 4'd4,\t\t\t\t\t\n\t\t\t\t\t \n\t\t\t\t\t norm_sgf_first= 4'd5, //Enable the barrel shifter's registers and evaluate if it's the first time (small operand) or the\n\t\t\t\t\t \t\t\t\t\t  //second time (result normalization)\t\n                      \n\t\t\t\t\t add_subt = 4'd6, //Enable the add_subt_sgf's registers  \n\n\t\t\t\t\t add_subt_r = 4'd7, //Enable the add_subt_sgf's registers for round condition\n\t\t\t\t\t \n\t\t\t\t\t overflow_add = 4'd8,\n\t\t\t\t\t \n\t\t\t\t\t round_sgf = 4'd9, //Evaluate the significand round condition\n                                          \n                      overflow_add_r = 4'd10,\n     \n                      extra2_64= 4'd11, //Enable registers for the exponent normalization on round condition\n                                                                \n                      norm_sgf_r = 4'd12, //Enable the barrel shifter's registers for round condition\n \n                      load_final_result  = 4'd13, //Load the final_result's register with the result\n \n                      ready_flag = 4'd14; //Enable the ready flag with the final result\n\n                     \n                     \n\t\t\t\t\t \n\t\t\t\t\t \n\n\n\t\t\t\t\t \n\t\t\t\t\t//**********************REVISADO\n\t\n\t\t\t\t\t\nreg [3:0] state_reg, state_next ; //state registers declaration\n\t\t \n////////////////////////Logic outputs///////////////77\n\nassign load_1_o= (state_reg==load_oper);\nassign load_2_o= (state_reg==zero_info_state);\n\n////\nalways @(posedge clk, posedge rst)\n\tif (rst) begin\n\t\tstate_reg <= start;\t\n\tend\n\telse begin\n\t\tstate_reg <= state_next;\n\tend\n\n///\t\nalways @*\n\tbegin\n\tstate_next = state_reg;\n\trst_int = 0;\n\t\t//Oper_Start_In control signals\n\t//load_1_o=0;\n\t//load_2_o=0;\n\n\t//Exp_operation control signals\n\tload_3_o=0;\n\tload_8_o=0;\n\tA_S_op_o=1;\n\n\t//Barrel shifter control signals\n\tload_4_o=0;\n\tleft_right_o=0;\n\tbit_shift_o=0; //bit input for shifts fills\n\n\t\n\t//Add_Subt_sgf control signals\n\tload_5_o=0;\n\n\t//LZA control signals\n\tload_6_o=0;\n\n\t//Deco_Round control signals\n\t//None\n\n\t//Final_Result control signals\n\tload_7_o=0;\n\t\n\t///////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\t//Multiplexer selector for Exp_operation's OPER_A\n\t\n\tctrl_a_o=0;\n\n\t//Multiplexer selector for Exp_operation's OPER_B\n\n\tctrl_b_o=2'b00;\n\tctrl_b_load_o=0;\n\n\t//Multiplexer selector for Barrel_Shifter's Data shift\n\n\tctrl_c_o=0;\n\n\t//Multiplexer selector for Barrel_Shifter's Shift value\n\n\n\t//Multiplexer selector for Add_Subt_Sgf's inputs\n\n\tctrl_d_o=0;\n\n\t\n\t//Ready Phase\n\tready = 0;\n\t//**REVISADO\n\trst_int = 0;\n\t\n\tcase(state_reg)\n//FPU reset \n\t\tstart: begin\n\t\t\trst_int=1;\n\n\t\t\tif(beg_FSM) begin\n\t\t\t\tstate_next = load_oper;\n\t\t\tend\n\t\tend\n\n\t\tload_oper: //Load input registers for  Oper_star in evaluation\n\t\t\n\t\tbegin\n\t\t\t\n\t\t//\tload_1_o = 1;\n\t\t\tstate_next = zero_info_state;\n\t\tend\n\n\t\tzero_info_state: //In case of zero condition, go to final result for ready flag. Else, continue with the calculation\n\t\tbegin\n\t\t\tif (zero_flag_i)begin\n\t\t\t\tstate_next = ready_flag;end\n\t\t\telse begin\n\t\t\t\t//load_2_o = 1;\n\t\t\t\tstate_next = load_diff_exp;end\n\t\tend\n\t\t\n\n\t\tload_diff_exp: //in first instance, Calculate DMP - DmP exponents, in other iteration, evaluation in\n\t\tbegin\n\t\t\tload_3_o = 1;\n\t\t\t/*\n\t\t\tif ()*/\n\n\t\t\tstate_next = extra1_64;\n\t\tend\n\n        extra1_64:\n        begin\n        load_3_o = 1;\n            if (norm_iteration_i)begin\n                load_8_o=1;\n                if(add_overflow_i)begin\n                    A_S_op_o=0;\n                    left_right_o=0;\n                    bit_shift_o=1;\n                end\n                        \n\t            else begin\n\t                A_S_op_o=1;\n\t                left_right_o=1;\n\t                bit_shift_o=0;\n                end\n            end               \n            state_next = norm_sgf_first;\n        end\n        \n\t\tnorm_sgf_first: //\n\t\tbegin\n\t\t\tload_4_o = 1;\n\t\t\tif (norm_iteration_i)begin\n\t\t\t\tif(add_overflow_i)begin\n                    left_right_o=0;\n                    bit_shift_o=1;\n                    state_next = round_sgf;\n                end\n\t\t\t\telse begin\n\t\t\t\t\tleft_right_o=1;\n\t\t\t\t\tbit_shift_o=0;\n\t\t\t\t\tstate_next = round_sgf;end\n\t\t\tend\n\t\t\telse \n\t\t\t\tstate_next = add_subt;\n\t\tend\n\n\n\t\tadd_subt:\n\t\tbegin\n\t\t\t//Reg enables\n\t\t\tload_5_o = 1;\n\t\t\tctrl_c_o = 1;\n\t\t\tstate_next = overflow_add;\n\t\tend\n\n\t\toverflow_add:\n\t\tbegin\n\t\t\t//Reg enables/Disables\n\t\t\tload_6_o=1;\n\t\t\tctrl_b_load_o=1;\n            if ( add_overflow_i)begin\n                ctrl_b_o=2'b10;\n                \n                end\n            else begin\n                A_S_op_o=1;\n                ctrl_b_o=2'b01;\n                \n\n            end\t\n            //state_next = load_exp_oper_over;\n            state_next = extra1_64;\n\t\tend\n\n\n\n\t\tround_sgf:\n\t\tbegin\n\t\t\tload_4_o = 0;\n\t\t\t\n\t\t\t\tif(round_i) begin\n\t\t\t\t\tctrl_d_o =1;\n\t\t\t\t\tctrl_a_o = 1;\n\t\t\t\t\tstate_next = add_subt_r; end\n\t\t\t\telse begin\n\t\t\t\t\tstate_next = load_final_result; end\n\t\tend\n\n\t\t\n\t\tadd_subt_r:\n\t\tbegin\n\t\t\tload_5_o = 1;\n\t\t\tstate_next = overflow_add_r;\n\t\t\t\n\t\tend\n\t\t\n\t\toverflow_add_r:\n\t\tbegin\n            ctrl_b_load_o=1;\t\n\t\t\tif ( add_overflow_i)begin\n                ctrl_b_o=2'b10;\n                end\n            else begin\n                ctrl_b_o=2'b11;\n                end\t\t\n\t\t    state_next = extra2_64;\n\t\tend\n\t\t\n\n\t\textra2_64:\n\t\t\n\t\tbegin\n  \t\t\tload_3_o = 1;\n            load_8_o = 1;\n\t\t\tif ( add_overflow_i)begin\n                A_S_op_o=0;\n\t            bit_shift_o=1;\n            end\n\t\n\t\t\tstate_next = norm_sgf_r;\n\t\t  \n        end\n      \n\t\tnorm_sgf_r:\n\t\tbegin\n\t\t\tload_4_o = 1;\n\t\t\tif ( add_overflow_i)begin\n                left_right_o=0;\n                bit_shift_o=1;\n            end\n\t\t\tstate_next = load_final_result;\n\t\tend\n\t\t\n\t\tload_final_result:\n\t\tbegin\n\t\t\tload_7_o = 1;\n\t\t\tstate_next = ready_flag;\n\t\tend\n\t\tready_flag:\n\t\tbegin\n\t\t\tready = 1;\n\t\t\t\tif(rst_FSM) begin\n\t\t\t\t\tstate_next = start;end\n\t\tend\n\n\t\tdefault:\n\t\tbegin\n\t\t\tstate_next =start;end\n\tendcase\nend\n\n\t\nendmodule\t\n",
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/FSM_Add_Subtract.v",
			"file_size": 8934,
			"file_write_time": 131183957446629510,
			"settings":
			{
				"buffer_size": 8944,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/FPU_Add_Subtract_Function.v",
			"settings":
			{
				"buffer_size": 12627,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sim_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Priority_Codec_32.v",
			"settings":
			{
				"buffer_size": 2322,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Add_Subt.v",
			"settings":
			{
				"buffer_size": 2538,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/add_sub_carry_out.v",
			"settings":
			{
				"buffer_size": 815,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "`timescale 1ns / 1ps\n//////////////////////////////////////////////////////////////////////////////////\n// Company: \n// Engineer: \n// \n// Create Date: 03/12/2016 06:18:20 PM\n// Design Name: \n// Module Name: Mux_Array\n// Project Name: \n// Target Devices: \n// Tool Versions: \n// Description: \n// \n// Dependencies: \n// \n// Revision:\n// Revision 0.01 - File Created\n// Additional Comments:\n// \n//////////////////////////////////////////////////////////////////////////////////\n\n\nmodule Mux_Array\n    #(parameter SWR=26, parameter EWR=5)\n    (\n    input wire [EWR-1:0] Shift_Value_i,\n    input wire [SWR-1:0] Shift_Data_i,\n    input wire Left_Right_i,\n    input wire Bit_Shift_i,\n    /////////////////////////////////////////////7\n    output wire [SWR-1:0] sht_result\n    );\n////\nwire [SWR-1:0] Data_array[EWR+1:0];\n\n//////////////////7\ngenvar k;//Level\n///////////////////77777\nRotate_Mux_Array #(.SWR(SWR)) first_rotate(\n\t.Data_i(Data_i),\n\t.select_i(FSM_left_right_i),\n\t.Data_o(Data_array [0][SWR-1:0])\n\t);\ngenerate for (k=0; k < 3; k=k+1) begin\n\tshift_mux_array #(.SWR(SWR), .LEVEL(k)) shift_mux_array(\n\t\t.Data_i(Data_array[k]),\n\t\t.select_i(Shift_Value_i[k]),\n\t\t.bit_shift_i(bit_shift_i),\n\t\t.Data_o(Data_array[k+1])\n\t\t);\n\tend\nendgenerate\n\nRegisterAdd #(.W(SWR)) Mid_Reg(\n        .clk(clk),\n        .rst(rst),\n        .load(1'b1),\n        .D(Data_array[3]),\n        .Q(Data_array[4])\n        );\n\ngenerate for (k=3; k < EWR; k=k+1) begin\n\tshift_mux_array #(.SWR(SWR), .LEVEL(k)) shift_mux_array(\n\t\t.Data_i(Data_array[k+1]),\n\t\t.select_i(Shift_Value_i[k]),\n\t\t.bit_shift_i(bit_shift_i),\n\t\t.Data_o(Data_array[k+2])\n\t\t);\n\tend\nendgenerate\n\nRotate_Mux_Array #(.SWR(SWR)) last_rotate(\n\t.Data_i(Data_array[EWR+1]),\n\t.select_i(FSM_left_right_i),\n\t.Data_o(Data_o)\n\t);\n\t\n\n\t\nendmodule\n",
			"file": "/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/b_shifter_2.v",
			"file_size": 1774,
			"file_write_time": 131189172842516620,
			"settings":
			{
				"buffer_size": 1768,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/RegisterAdd.v",
			"settings":
			{
				"buffer_size": 818,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/MultiplexTxT.v",
			"settings":
			{
				"buffer_size": 994,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Mux_3x1.v",
			"settings":
			{
				"buffer_size": 799,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/fpuuart/FPU_UART.v",
			"settings":
			{
				"buffer_size": 4370,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/shift_mux.v",
			"settings":
			{
				"buffer_size": 1224,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/Round_decoder_M.v",
			"settings":
			{
				"buffer_size": 980,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/OR_Module.v",
			"settings":
			{
				"buffer_size": 856,
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/rtl/RecursiveKOA.v",
			"settings":
			{
				"buffer_size": 2468,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/FSM_Mult_Function.v",
			"settings":
			{
				"buffer_size": 5817,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/imports/rtl/RecursiveKOA.v",
			"settings":
			{
				"buffer_size": 2461,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/imports/rtl/KOA_c_v3.v",
			"settings":
			{
				"buffer_size": 6790,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/rtl/KOA_c_v2.v",
			"settings":
			{
				"buffer_size": 9722,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/imports/rtl/KOA_c_v2.v",
			"settings":
			{
				"buffer_size": 9722,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/Sgf_Multiplication.v",
			"settings":
			{
				"buffer_size": 10589,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Multiplexer_AC.v",
			"settings":
			{
				"buffer_size": 754,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.sim/bloody_simruns/behav/output_log.py",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "//==================================================================================================\n//  Filename      : FSM_input_enable.v\n//  Created On    : 2016-09-21 00:26:00\n//  Last Modified : 2016-09-25 21:37:40\n//  Revision      :\n//  Author        : Jorge Sequeira Rojas\n//  Company       : Instituto Tecnologico de Costa Rica\n//  Email         : jsequeira@gmail.com\n//\n//  Description   : FSM controlling the initialization and input of the operands and the\n//\t\tdesired operation\n//\n//==================================================================================================\n\n`timescale 1ns / 1ps\n\n\n\nmodule FSM_INPUT_ENABLE(\n\t//INPUTS\n\tinput wire clk,\n\tinput wire rst,\n\tinput wire init_OPERATION,\n\n\toutput reg enable_input_internal,\n\t//output enable for the first stage of the pipeline\n\toutput wire enable_Pipeline_input,\n\toutput reg enable_shift_reg\n\n    );\n\n\n////////States///////////\n//Zero Phase\nparameter [3:0] State0 = 3'd0,\n\n\tState1 = 3'd1,\n\n\tState2 = 3'd2,\n\n\tState3 = 3'd3,\n\n\tState4 = 3'd4,\n\n\tState5= 3'd5,\n\n\tState6 = 3'd6,\n\n\tState7 = 3'd7;\n\n\n//State registers\nreg [2:0] state_reg, state_next;\n\n//State registers reset and standby logic\nalways @(posedge clk, posedge rst)\n\tif(rst)\n\t\tstate_reg <= State0;\n\telse\n\t\tstate_reg <= state_next;\n\n//Transition and Output Logic\nalways @*\n\tbegin\n\t\t\t//DEFAULT INITIAL VALUES\n\t//STATE DEFAULT BEHAVIOR\n\tstate_next = state_reg; //If no changes, keep the value of the register unaltered\n\n\tenable_input_internal=1; //It is internal because its an intermediary value\n\tenable_shift_reg = 0;\n\tcase(state_reg)\n\n\t\tState0:\n\t\t\tbegin\n\t\t\t\t//OUTPUT SIGNAL\n\t\t\t\tenable_input_internal=1;\n\t\t\t\tenable_shift_reg = 0;\n\t\t\t\t//NEXT STATE\n\t\t\t\tif(init_OPERATION)\n\t\t\t\t\tstate_next = State1; //JUMP TO NEXT STATE\n\t\t\t\telse begin\n\t\t\t\t\tstate_next = State0; //STAY\n\t\t\t\tend\n\n\t\t\tend\n\n\t\tState1:\n\t\t\tbegin\n\t\t\t\t//OUTPUT SIGNAL\n\t\t\t\tenable_input_internal=1;\n\t\t\t\tenable_shift_reg = 1;\n\t\t\t\t//NEXT STATE\n\t\t\t\tstate_next = State2;\n\t\t\tend\n\n\t\tState2:\n\t\t\tbegin\n\t\t\t\t//OUTPUT SIGNAL\n\t\t\t\tenable_input_internal=1;\n\t\t\t\tenable_shift_reg = 1;\n\t\t\t\t//NEXT STATE\n\t\t\t\tstate_next = State3;\n\t\t\tend\n\n\t\tState3:\n\t\t\tbegin\n\t\t\t\t//OUTPUT SIGNAL\n\t\t\t\tenable_input_internal=0;\n\t\t\t\tenable_shift_reg = 1;\n\t\t\t\t//NEXT STATE\n\t\t\t\tstate_next = State4;\n\t\t\tend\n\n\t\tState4:\n\t\t\tbegin\n\t\t\t\t//OUTPUT SIGNAL\n\t\t\t\tenable_input_internal=0;\n\t\t\t\tenable_shift_reg = 1;\n\t\t\t\t//NEXT STATE\n\t\t\t\tstate_next = State5;\n\t\t\tend\n\n\t\tState5:\n\t\t\tbegin\n\t\t\t\t//OUTPUT SIGNAL\n\t\t\t\tenable_input_internal=0;\n\t\t\t\tenable_shift_reg = 1;\n\t\t\t\t//NEXT STATE\n\t\t\t\tstate_next = State0;\n\t\t\tend\n\n\t\t// State6:\n\t\t// \tbegin\n\t\t// \t\t//OUTPUT SIGNAL\n\t\t// \t\tenable_input_internal=0;\n\t\t// \t\tenable_shift_reg = 1;\n\t\t// \t\t//NEXT STATE\n\t\t// \t\tstate_next = State7;\n\t\t// \tend\n\n\t\t// State7:\n\t\t// \tbegin\n\t\t// \t\t//OUTPUT SIGNAL\n\t\t// \t\tenable_input_internal=0;\n\t\t// \t\tenable_shift_reg = 1;\n\t\t// \t\t//NEXT STATE\n\t\t// \t\tstate_next = State0;\n\t\t//\tend\n\t\tdefault:\n\t\t\tbegin\n\t\t\t\tstate_next =State0;\n\n\t\t\tend\n\tendcase\nend\n\n\nassign  enable_Pipeline_input = enable_input_internal & init_OPERATION;\n\nendmodule\n",
			"file": "/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FSM_input_enable.v",
			"file_size": 3019,
			"file_write_time": 131193346600000000,
			"settings":
			{
				"buffer_size": 3019,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/bloody_simruns/imports/Pipeline_FPADD_sourcefiles/tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v",
			"settings":
			{
				"buffer_size": 35125,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sim_1/imports/Pipeline_FPADD_sourcefiles/FPU_ADD_Substract_PIPELINED.v",
			"settings":
			{
				"buffer_size": 24534,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/sgn_result.v",
			"settings":
			{
				"buffer_size": 930,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FPU_ADD_Substract_PIPELINED.v",
			"settings":
			{
				"buffer_size": 24854,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "//==================================================================================================\n//  Filename      : FPU_ADD_Substract_PIPELINED.v\n//  Created On    : 2016-09-27 20:11:48\n//  Last Modified : 2016-09-27 20:12:02\n//  Revision      :\n//  Author        : Jorge Sequeira Rojas\n//  Company       : Instituto Tecnologico de Costa Rica\n//  Email         : jsequeira@gmail.com\n//\n//  Description   :\n//\n//\n//==================================================================================================\n`timescale 1ns/1ps\n//==================================================================================================\n//  Filename      : FPU_ADD_Substract_PIPELINED.v\n//  Created On    : 2016-09-21 14:31:41\n//  Last Modified : 2016-09-27 08:58:31\n//  Revision      :\n//  Author        : Jorge Sequeira Rojas\n//  Company       : Instituto Tecnologico de Costa Rica\n//  Email         : jsequeira@gmail.com\n//\n//  Description   : This is the TOP for the pipelined FP Addition and substraction.\n//\n//\n//==================================================================================================\n\n// `include \"Tenth_Phase_v2.v\"\n// `include \"Priority_Codec_32.v\"\n// `include \"Priority_Codec_64.v\"\n// `include \"sgn_result.v\"\n// `include \"Shift_left_logical.v\"\n// `include \"xor_tri.v\"\n// `include \"RegisterAdd.v\"\n// `include \"Multiplexer_AC.v\"\n// `include \"FSM_input_enable.v\"\n// `include \"MultiplexTxT.v\"\n// `include \"shift_mux.v\"\n// `include \"FORMATTER.v\"\n// `include \"Rotate_Mux_Array.v\"\n\n\n\n\n\nmodule FPU_PIPELINED_FPADDSUB\n\n   /*#(parameter W = 32, parameter EW = 8, parameter SW = 23,\n\t\tparameter SWR=26, parameter EWR = 5)  //Single Precision */\n\n#(parameter W = 64, parameter EW = 11, parameter SW = 52,\n\t\tparameter SWR = 55, parameter EWR = 6) //-- Double Precision */\n\t(\n\t\t//FSM Signals\n\t\tinput wire clk,\n\t\tinput wire rst,\n\t\tinput wire beg_OP,\n\t\t//input wire ack_OP,\n\n\t\t//Oper_Start_in signals\n\t\tinput wire [W-1:0] Data_X,\n\t\tinput wire [W-1:0] Data_Y,\n\t\tinput wire add_subt,\n\n\t\t//Round signals signals\n\t\t//input wire [1:0] r_mode,\n\n\t\t//OUTPUT SIGNALS\n    output wire busy,\n\t\toutput wire overflow_flag,\n\t\toutput wire underflow_flag,\n    output wire zero_flag,\n\t  output wire ready,\n\t\toutput wire [W-1:0] final_result_ieee\n    );\n\n\n///////////////////WE LOAD THE INPUT VALUES AND OTHER SIGNALS ////\n// ONTO THE FIRST STAGE//////\n\n\nwire enable_Pipeline_input;\nwire FSM_enable_input_internal;\nwire [6:0] Shift_reg_FLAGS_7;\nwire real_input_enable;\nwire enable_shift_reg;\n\n\n\nFSM_INPUT_ENABLE inst_FSM_INPUT_ENABLE (\n\t\t.clk                   (clk),\n\t\t.rst                   (rst),\n\t\t.init_OPERATION        (beg_OP),\n    .enable_input_internal (FSM_enable_input_internal),\n\t\t.enable_Pipeline_input (enable_Pipeline_input),\n    .enable_shift_reg      (enable_shift_reg)\n\t);\n\n\n\n\n  ShiftRegister #(.W(7)) inst_ShiftRegister (\n      .clk(clk),\n      .rst(rst),\n      .load  (enable_shift_reg|enable_Pipeline_input),\n      .in_bit (FSM_enable_input_internal),\n      .Q(Shift_reg_FLAGS_7));\n\n\n\n\n\n\n//////////////////////////////----------------INIT------------------///////////////////////////////\nwire ZERO_FLAG_INIT;\n\nwire [W-1:0] intDX_EWSW, intDY_EWSW; //BUFFER OPERAND 1, OPERAND 2\nwire intAS; //ADD SUB INPUT OPERATION\n\nwire INPUT_ACTIVE;\n\n\nwire gtXY, eqXY;\n\n/// FLAGS PIPE STAGE: INIT\nwire OP_FLAG_INIT, SIGN_FLAG_INIT;\n/// DATA PIPE STAGE : INIT\nwire [W-2:0] DMP_INIT_EWSW, DmP_INIT_EWSW;\n\n\n//////////////////////////////----------------EXP------------------///////////////////////////////\n\n\n// FLAGS\nwire SIGN_FLAG_EXP, OP_FLAG_EXP, ZERO_FLAG_EXP, EXP_ACTIVE;\n\n//Whole operand declaration\n\nwire [W-2:0] DMP_EXP_EWSW, DmP_EXP_EWSW;\n\n/// EXPONENT DECLARATION\n\nwire [EW-1:0] DMP_exp_EXP_EW, DmP_exp_EXP_EW;\n\n/// MANTISSA OR SIGNIFICAND DECLARATION\n\nwire [SW-1:0] DMP_mant_EXP_SW, DmP_mant_EXP_SW;\n\n//SHIFT AMOUNT DECLARATION\n\nwire [EW-1:0] Shift_amount_EXP_EW; //Exponent operation result\n\n\n//////////////////////////////----------------SHT1------------------///////////////////////////////\n\n//FLAGS\n\nwire [SWR-1:0]b_shifter_one_SWR;\n\nwire SIGN_FLAG_SHT1, OP_FLAG_SHT1, ZERO_FLAG_SHT1, SHT1_ACTIVE;\n\n\n//OPERAND SIGNALS\nwire [W-2:0]  DMP_SHT1_EWSW;\nwire [SW-1:0] DmP_mant_SHT1_SW;\nwire [EWR-1:0] Shift_amount_SHT1_EWR;\n/////////////////------SIGNALS FOR THE FIRST PART OF THE SHIFTER-------//////////-///////////////////\n\nwire [EWR-1:0] shft_value_mux_o_EWR;\nwire left_right_SHT1;\nwire bit_shift_SHT1;\n\nwire [SWR-1:0] sftr_idat_SHT1_SWR; //SHIFTER INPUT DATA\nwire [SWR-1:0] sftr_odat_SHT1_SWR; //SHIFTER OUTPUT DATA\n\n///////////BARREL SHIFTER INPUT VALUE MUX SIGNALS\n\n// TEMPORARY WIRES\nwire [EWR-1:0] mux_sel_norm_EWR; //OUTPUT SIGNAL FOR MUX SHIFT VALUE\nwire [SWR-1:0] Data_array_SWR[EWR+1:0]; //TEMPORARY FOR THE DIFFERENT STAGES OF THE SHIFTER\n\n//////////////////////////////----------------SHT2------------------///////////////////////////////\n\n//FLAGS\nwire SIGN_FLAG_SHT2, OP_FLAG_SHT2, ZERO_FLAG_SHT2, SHT2_ACTIVE;\n\n\n/////////////////------SIGNALS FOR THE SECOND PART OF THE SHIFTER-------//////////-///////////////////\nwire [W-2:0]DMP_SHT2_EWSW;\n\nwire [EWR-1:0] shift_value_SHT2_EWR;\nwire left_right_SHT2;\nwire bit_shift_SHT2;\n\nwire [SWR-1:0] sftr_idat_SHT2_SWR; //SHIFTER INPUT DATA\nwire [SWR-1:0] sftr_odat_SHT2_SWR; //SHIFTER OUTPUT DATA\n\nwire ADD_OVRFLW_NRM2, NRM2_ACTIVE;\n\nwire [EW-1:0]Exp_oper_1_EW;\n/////////////////------SIGNALS FOR THE LAST EXPONENT OPERATION-------/////////-///////////////////\n\nreg [EW:0] exp_rslt_NRM2_EW1;\nwire [EW-1:0] ADDSUB_exp_operand_EW;\n\nwire [EW-1:0]DMP_exp_NRM2_EW;\nwire SIGN_FLAG_SHT1SHT2, ZERO_FLAG_SHT1SHT2;\n\n//////////////////////////////----------------SGF------------------///////////////////////////////\n\n//FLAGS\nwire SIGN_FLAG_SFG, OP_FLAG_SFG, ZERO_FLAG_SFG, SFG_ACTIVE;\nwire ADD_OVRFLW_SGF;\n\nwire [SWR-1:0]    DmP_mant_SFG_SWR;\nwire [SWR-1:0]    DMP_mant_SFG_SWR;\n\nwire [EW-1:0] DMP_exp_SFG;\n\nreg Carry_out_SGF;\nreg [SWR-1:0] Raw_mant_SGF;\nwire [W-2:0] DMP_SFG;\n\n//////////////////////////////----------------NRM------------------///////////////////////////////\n//Flags\n\nwire ADD_OVRFLW_NRM, SIGN_FLAG_NRM, ZERO_FLAG_NRM, NRM_ACTIVE;\n\nwire [EW-1:0]DMP_exp_NRM_EW;\n\nwire [SWR-1:0] Add_Subt_LZD_SWR;\nwire [SWR-1:0] Raw_mant_NRM_SWR;\n\nwire [EW-1:0] LZD_output_NRM2_EW;\nwire [EWR-1:0] LZD_raw_out_NRM2_EWR;\nwire [EWR-1:0] LZD_raw_out_EWR;\nwire [EW-EWR-1:0] LZD_ZFiller;\n\n\n//////////////////////////////----------------FRMT------------------///////////////////////////////\n\nwire OVRFLW_FLAG_FRMT, UNDRFLW_FLAG_FRMT;\nwire [W-1:0] formatted_number_W;\n\n\n /////////////////////////////////////FIRST STAGE \"INIT\" ///////////////////////////////\n///////////////////////////////////// PIPELINE REGISTER = INIT//////////////////////////////////////\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n  RegisterAdd #(.W(W)) INPUT_STAGE_OPERANDX (\n  .clk(clk),\n  .rst(rst),\n  .load(enable_Pipeline_input),\n  .D(Data_X),\n  .Q(intDX_EWSW));\n\n  RegisterAdd #(.W(W)) INPUT_STAGE_OPERANDY (\n  .clk(clk),\n  .rst(rst),\n  .load(enable_Pipeline_input),\n  .D(Data_Y),\n  .Q(intDY_EWSW));\n\n  RegisterAdd #(.W(1)) INPUT_STAGE_FLAGS (\n  .clk(clk),\n  .rst(rst),\n  .load(enable_Pipeline_input),\n  .D(add_subt),\n  .Q(intAS));\n\n// RegisterAdd #(.W(2*W+1+1)) INPUT_STAGE (\n//     .clk(clk),\n//     .rst(rst),\n//     .load(enable_Pipeline_input),\n//     .D({add_subt , Data_X, Data_Y, enable_Pipeline_input}),\n//     .Q({intAS      , intDX_EWSW   , intDY_EWSW   , INPUT_ACTIVE})\n//     );\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n//Compares between magnitude for DATA_X and DATA_Y and select whos bigger and if there's a equality\n\nComparator #(.W(W-1)) Magnitude_Comparator (\n    .Data_X_i(intDX_EWSW[W-2:0]),\n    .Data_Y_i(intDY_EWSW[W-2:0]),\n    .gtXY_o(gtXY),\n    .eqXY_o(eqXY)\n    );\n\n\n//Classifies in the registers the bigger value (M) and the smaller value (m)\n\nMultiplexTxT #(.W(W-1)) MuxXY (\n\t.select(gtXY),\n    .D0_i(intDX_EWSW[W-2:0]),\n    .D1_i(intDY_EWSW[W-2:0]),\n    .S0_o(DMP_INIT_EWSW),\n    .S1_o(DmP_INIT_EWSW)\n    );\n\n//Operation between the DATA_X & Y's sign bit and the operation bit to find the real operation for ADDER/SUBTRACT\nxor_tri #(.W(W)) Op_verification (\n    .A_i(intDX_EWSW[W-1]),   //Signo de ese operando\n    .B_i(intDY_EWSW[W-1]),   //Signo de ese operando\n    .C_i(intAS),        //Operacion ingresada por modulo externo\n    .Z_o(OP_FLAG_INIT)\n    );\n\n//Calculate the sign bit for the final result\nsgn_result result_sign_bit (\n    .Add_Subt_i(intAS),\n    .sgn_X_i(intDX_EWSW[W-1]),\n    .sgn_Y_i(intDY_EWSW[W-1]),\n    .gtXY_i(gtXY),\n    .eqXY_i(eqXY),\n    .sgn_result_o(SIGN_FLAG_INIT)\n    );\n\n//zero flag if theres a subtraction and the variables are equal\n\n\nassign ZERO_FLAG_INIT = OP_FLAG_INIT & eqXY;\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n ////////////////////////////////////////SECOND STAGE \"EXP\" ///////////////////////////////\n///////////////////////////////////// PIPELINE REGISTER = EXP//////////////////////////////////////\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n  RegisterAdd #(.W(W-1)) EXP_STAGE_DMP (\n  .clk(clk),\n  .rst(rst),\n  .load(INPUT_ACTIVE),\n  .D(DMP_INIT_EWSW),\n  .Q(DMP_EXP_EWSW));\n//El sintetizador puede eliminar algunos registros de acá debido a\n//la no utilización de estos. Para este caso, se reducirá el tamaño\n//de el registro de menor tamaño\n\n//Estos warnings pueden ser ignorados.\n\n  RegisterAdd #(.W(W-1)) EXP_STAGE_DmP (\n  .clk(clk),\n  .rst(rst),\n  .load(INPUT_ACTIVE),\n  .D(DmP_INIT_EWSW),\n  .Q(DmP_EXP_EWSW));\n\n  RegisterAdd #(.W(3))  EXP_STAGE_FLAGS (\n  .clk(clk),\n  .rst(rst),\n  .load(INPUT_ACTIVE),\n  .D({SIGN_FLAG_INIT, OP_FLAG_INIT, ZERO_FLAG_INIT}),\n  .Q({SIGN_FLAG_EXP , OP_FLAG_EXP , ZERO_FLAG_EXP}));\n\n\n// RegisterAdd #(.W( W - 1 + W - 1 + 3 )) EXP_STAGE (\n//     .clk(clk),\n//     .rst(rst),\n//     .load(INPUT_ACTIVE),\n//     .D({DMP_EXP_EWSW, DmP_INIT_EWSW, SIGN_FLAG_INIT, OP_FLAG_INIT, ZERO_FLAG_INIT, INPUT_ACTIVE}),\n//     .Q({DMP_EXP_EWSW , DmP_EXP_EWSW , SIGN_FLAG_EXP , OP_FLAG_EXP , ZERO_FLAG_EXP , EXP_ACTIVE   })\n//     );\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n\n\n//Aca pueden salir problemas por el largo del exponente.\n\n//THE FOLLOWING IS JUST FOR SIMULATION PURPOSES\n assign DMP_exp_EXP_EW = DMP_EXP_EWSW[W-2:W-EW-1]; //We assign the exponent bits for the comming operation\n assign DmP_exp_EXP_EW = DmP_EXP_EWSW[W-2:W-EW-1]; //We assign the exponent bits for the comming operation\n assign DMP_mant_EXP_SW = DMP_EXP_EWSW[SW-1:0];\n////////////WE SUBTRACT THE DIFFERENCE BETWEEN EXPONENTS (hence, the EXP name) /////////////\n\nassign Shift_amount_EXP_EW = DMP_EXP_EWSW[W-2:SW] - DmP_EXP_EWSW[W-2:SW];\n\n//assign DMP_mant_EXP_SW = DMP_EXP_EWSW[SW-1:0];\nassign DmP_mant_EXP_SW = DmP_EXP_EWSW[SW-1:0];\n\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n/////////////////////////////////////////THIRD STAGE \"SFT1\" ////////////////////////////\n/////////////////////////////////// PIPELINE REGISTER = SFT1 /////////////////////////////\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n// RegisterAdd #(.W(W-1+SW+EWR+4)) SHT1_STAGE (\n//     .clk(clk),\n//     .rst(rst),\n//     .load(EXP_ACTIVE),\n//     .D({DMP_EXP_EWSW , DmP_mant_EXP_SW , Shift_amount_EXP_EW , SIGN_FLAG_EXP , OP_FLAG_EXP , ZERO_FLAG_EXP , EXP_ACTIVE}),\n//     .Q({DMP_SHT1_EWSW, DmP_mant_SHT1_SW, Shift_amount_SHT1_EWR, SIGN_FLAG_SHT1, OP_FLAG_SHT1, ZERO_FLAG_SHT1, SHT1_ACTIVE})\n//     );\n  RegisterAdd #(.W(W-1)) SHT1_STAGE_DMP (\n  .clk(clk),\n  .rst(rst),\n  .load(EXP_ACTIVE),\n  .D(DMP_EXP_EWSW),\n  .Q(DMP_SHT1_EWSW));\n\n  RegisterAdd #(.W(SW)) SHT1_STAGE_DmP_mant (\n  .clk(clk),\n  .rst(rst),\n  .load(EXP_ACTIVE),\n  .D(DmP_mant_EXP_SW),\n  .Q(DmP_mant_SHT1_SW));\n\n  RegisterAdd #(.W(EWR)) SHT1_STAGE_sft_amount (\n  .clk(clk),\n  .rst(rst),\n  .load(EXP_ACTIVE),\n  .D(Shift_amount_EXP_EW[EWR-1:0]),\n  .Q(Shift_amount_SHT1_EWR));\n\n  RegisterAdd #(.W(3)) SHT1_STAGE_FLAGS (\n  .clk(clk),\n  .rst(rst),\n  .load(EXP_ACTIVE),\n  .D({SIGN_FLAG_EXP , OP_FLAG_EXP , ZERO_FLAG_EXP}),\n  .Q({SIGN_FLAG_SHT1, OP_FLAG_SHT1, ZERO_FLAG_SHT1}));\n////////////////////////----------------------TEMPS---------------///////////////////////////////\n\n\n//////////////////////////////----------------------------------///////////////////////////////\n\ngenerate\n    case(EW)\n        8:begin\n            assign b_shifter_one_SWR = 5'd1;\n        end\n        default:begin\n            assign b_shifter_one_SWR = 6'd1;\n        end\n    endcase\nendgenerate\n\ngenerate\n    case(EW)\n        8:begin\n            assign LZD_ZFiller =3'd0;\n            assign Exp_oper_1_EW = 8'd1;\n        end\n        default:begin\n            assign LZD_ZFiller =5'd0;\n             assign Exp_oper_1_EW = 11'd1;\n        end\n    endcase\nendgenerate\n//assign mux_out = (sel) ? din_1 : din_0;\n//Input variables for the shifter, depending upon the stage.\n\n\nassign mux_sel_norm_EWR     = (ADD_OVRFLW_NRM) ? b_shifter_one_SWR : LZD_raw_out_EWR;\nassign shft_value_mux_o_EWR = (NRM_ACTIVE)     ?  mux_sel_norm_EWR : Shift_amount_SHT1_EWR;\n\n//assign left_right_SHT1      = (NRM_ACTIVE)     ? (~ADD_OVRFLW_NRM) : 1'b0;\n\nassign left_right_SHT1      = (NRM_ACTIVE)&(~ADD_OVRFLW_NRM);\n\nassign bit_shift_SHT1       = (NRM_ACTIVE)&(ADD_OVRFLW_NRM);\n\n\n\tMultiplexer_AC #(.W(SWR)) b_shftr_idat_mux_SHT1 (\n\t\t.ctrl(NRM_ACTIVE                   ),\n\t\t.D0  ({1'b1,DmP_mant_SHT1_SW,2'b00}),\n\t\t.D1  (Raw_mant_NRM_SWR             ),\n\t\t.S   (sftr_idat_SHT1_SWR           )\n\t\t);\n\n////////////////////////////////////////////////////\n\tgenvar k;\t\t\t//Level//\n////////////////////////////////////////////////////\n\n\n\tRotate_Mux_Array #(.SWR(SWR)) first_rotate(\n\t\t.Data_i  (sftr_idat_SHT1_SWR),\n\t\t.select_i(left_right_SHT1),\n\t\t.Data_o  (Data_array_SWR [0][SWR-1:0])\n\t\t);\n\n\tgenerate for (k=0; k < 2; k=k+1) begin : shift_mux_array1\n\t\tshift_mux_array #(.SWR(SWR), .LEVEL(k)) shift_mux_array(\n\t\t\t.Data_i     (Data_array_SWR[k]),\n\t\t\t.select_i   (shft_value_mux_o_EWR[k]),\n\t\t\t.bit_shift_i(bit_shift_SHT1),\n\t\t\t.Data_o     (Data_array_SWR[k+1])\n\t\t\t);\n\t\tend\n\tendgenerate\n\nassign sftr_odat_SHT1_SWR = Data_array_SWR[2];\nassign Data_array_SWR[3] = sftr_idat_SHT2_SWR;\n\n\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n/////////////////////////////////////////FOURTH STAGE \"SFT2\" ////////////////////////////\n/////////////////////////////////// PIPELINE REGISTER = SFT2 /////////////////////////////\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n  RegisterAdd #(.W(W-1)) SHT2_STAGE_DMP (\n  .clk(clk),\n  .rst(rst),\n  .load(SHT1_ACTIVE),\n  .D(DMP_SHT1_EWSW),\n  .Q(DMP_SHT2_EWSW));\n\n  RegisterAdd #(.W(SWR)) SHT2_SHIFT_DATA (\n  .clk(clk),\n  .rst(rst),\n  .load((SHT1_ACTIVE|NRM_ACTIVE)),\n  .D(sftr_odat_SHT1_SWR),\n  .Q(sftr_idat_SHT2_SWR));\n\n//LOS BITS 4, 3 y 2 DE ESTE REGISTRO PUEDEN SER ELIMINADOS\n//GRACIAS A QUE SE UTILIZARON EN LA ETAPA ANTERIOR DE CORRIMIENTO.\n\n  RegisterAdd #(.W(EWR)) SHT2_STAGE_SHFTVARS1 (\n  .clk(clk),\n  .rst(rst),\n  .load(SHT1_ACTIVE|NRM_ACTIVE),\n  .D({shft_value_mux_o_EWR}),\n  .Q({shift_value_SHT2_EWR}));\n\n  RegisterAdd #(.W(2)) SHT2_STAGE_SHFTVARS2 (\n  .clk(clk),\n  .rst(rst),\n  .load(SHT1_ACTIVE|NRM_ACTIVE),\n  .D({left_right_SHT1,bit_shift_SHT1}),\n  .Q({left_right_SHT2, bit_shift_SHT2}));\n\n  RegisterAdd #(.W(3)) SHT2_STAGE_FLAGS (\n  .clk(clk),\n  .rst(rst),\n  .load(SHT1_ACTIVE),\n  .D({SIGN_FLAG_SHT1, OP_FLAG_SHT1, ZERO_FLAG_SHT1}),\n  .Q({SIGN_FLAG_SHT2, OP_FLAG_SHT2, ZERO_FLAG_SHT2}));\n\n/////////////////DE ACA SALE DIRECTO A LA ETAPA DE FORMATO//////////////\n\n  RegisterAdd #(.W(EWR+EW)) SFT2FRMT_STAGE_VARS(\n    .clk(clk),\n    .rst(rst),\n    .load(NRM_ACTIVE),\n    .D({LZD_raw_out_EWR     , DMP_exp_NRM_EW }),\n    .Q({LZD_raw_out_NRM2_EWR, DMP_exp_NRM2_EW})\n    );\n\n  RegisterAdd #(.W(3)) SFT2FRMT_STAGE_FLAGS (\n    .clk(clk),\n    .rst(rst),\n    .load(NRM_ACTIVE),\n    .D({ADD_OVRFLW_NRM , SIGN_FLAG_NRM     , ZERO_FLAG_NRM }),\n    .Q({ADD_OVRFLW_NRM2, SIGN_FLAG_SHT1SHT2, ZERO_FLAG_SHT1SHT2}));\n//////////////////////////////----------------------------------///////////////////////////////\n\n\n\n//////////////////////////////----------------------------------///////////////////////////////\n\ngenerate for (k=2; k < EWR; k=k+1) begin : shift_mux_array2\n\tshift_mux_array #(.SWR(SWR), .LEVEL(k)) shift_mux_array(\n\t\t.Data_i(Data_array_SWR[k+1]),\n\t\t.select_i(shift_value_SHT2_EWR[k]),\n\t\t.bit_shift_i(bit_shift_SHT2),\n\t\t.Data_o(Data_array_SWR[k+2])\n\t\t);\n\tend\nendgenerate\n\n\tRotate_Mux_Array #(.SWR(SWR)) last_rotate(\n\t\t.Data_i(Data_array_SWR[EWR+1]),\n\t\t.select_i(left_right_SHT2),\n\t\t.Data_o(sftr_odat_SHT2_SWR)\n\t\t);\n\n\nassign LZD_output_NRM2_EW = {LZD_ZFiller, LZD_raw_out_NRM2_EWR};\n\n////////////////////////INPUT MUX FOR ADD/SUB/////////////////////////\n\n\tassign ADDSUB_exp_operand_EW = (ADD_OVRFLW_NRM2) ? Exp_oper_1_EW : LZD_output_NRM2_EW;\n\n////////////////////////INPUT MUX FOR ADD/SUB/////////////////////////\n\n//////////////////////////ADDER/SUBSTRACTOR///////////////////////\n\n\t// always @* begin : ADD_SUB_NRM\n\t//    case (ADD_OVRFLW_NRM2)\n //        1'b0  : begin\n //                    {Carry_out_SFT2, exp_rslt_NRM2_EW1} = DMP_exp_NRM2_EW + ADDSUB_exp_operand_EW;\n //                 end\n //        1'b1  : begin\n //                    {Carry_out_SFT2, exp_rslt_NRM2_EW1} = DMP_exp_NRM2_EW - ADDSUB_exp_operand_EW;\n //                 end\n //        default: begin\n //                    {Carry_out_SFT2, exp_rslt_NRM2_EW1} = DMP_exp_NRM2_EW + ADDSUB_exp_operand_EW;\n //                 end\n //     endcase\n\n  always @* begin\n    if (ADD_OVRFLW_NRM2) begin\n      exp_rslt_NRM2_EW1 = DMP_exp_NRM2_EW + ADDSUB_exp_operand_EW;\n    end\n    else begin\n      exp_rslt_NRM2_EW1 = DMP_exp_NRM2_EW - ADDSUB_exp_operand_EW;\n    end\n  end\n//////////////////////////ADDER/SUBSTRACTOR///////////////////////\n\n\nFORMATTER #(.EW(EW+1)) array_comparators(\n    .exp(exp_rslt_NRM2_EW1),\n    .overflow (OVRFLW_FLAG_FRMT),\n    .underflow(UNDRFLW_FLAG_FRMT));\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n/////////////////////////////////////////FIFTH STAGE \"SGF\" ////////////////////////////\n/////////////////////////////////// PIPELINE REGISTER = SGF /////////////////////////////\n\n//////////////////////////////----------------------------------///////////////////////////////\n  RegisterAdd #(.W(W-1))   SGF_STAGE_DMP (\n  .clk(clk),\n  .rst(rst),\n  .load((SHT2_ACTIVE&~NRM2_ACTIVE)),\n  .D(DMP_SHT2_EWSW),\n  .Q(DMP_SFG));\n\n  RegisterAdd #(.W(SWR))  SGF_STAGE_DmP_mant (\n  .clk(clk),\n  .rst(rst),\n  .load(SHT2_ACTIVE&~NRM2_ACTIVE),\n  .D(sftr_odat_SHT2_SWR),\n  .Q(DmP_mant_SFG_SWR));\n\n  RegisterAdd #(.W(3))    SGF_STAGE_FLAGS (\n  .clk(clk),\n  .rst(rst),\n  .load(SHT2_ACTIVE&~NRM2_ACTIVE),\n  .D({SIGN_FLAG_SHT2,OP_FLAG_SHT2, ZERO_FLAG_SHT2}),\n  .Q({SIGN_FLAG_SFG , OP_FLAG_SFG, ZERO_FLAG_SFG }));\n\n\n// RegisterAdd #(.W(W+SWR+4)) SGF_STAGE(\n// \t\t.clk(clk),\n// \t\t.rst(rst),\n// \t\t.load(SHT2_ACTIVE&~NRM2_ACTIVE),//Esto significa que si esta en NRM2, no active SGF\n//     .D({DMP_SHT2_EWSW, sftr_odat_SHT2_SWR, SIGN_FLAG_SHT2,OP_FLAG_SHT2, ZERO_FLAG_SHT2, SHT2_ACTIVE}),\n//     .Q({DMP_SFG , DmP_mant_SFG_SWR  , SIGN_FLAG_SFG , OP_FLAG_SFG, ZERO_FLAG_SFG , SFG_ACTIVE})\n//     );\n\n// RegisterAdd #(.W( )) NORM_2_SGF_STAGE(\n//         .clk(clk),+\n//         .rst(rst),\n//         .load(NRM2SFT2_ACTIVE),\n//         .D({, Overflow_flag_SHT2, Underflow_flag_SHT2, NRM2SFT2_ACTIVE}),\n//         .Q({, OVRFLW_FLAG_FRMT, UNDRFLW_FLAG_FRMT, SFT2FRMT_ACTIVE  })\n//         );\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n\n\n\n//////////////////////////////----------------------------------///////////////////////////////\n\tassign DMP_mant_SFG_SWR = {1'b1,DMP_SFG[SW-1:0],2'b00};\n\n\tassign DMP_exp_SFG = DMP_SFG[W-2:SW];\n\n\talways @* begin : ADD_SUB_SGF\n       case (OP_FLAG_SFG)\n          1'b0  : begin\n                      {Carry_out_SGF, Raw_mant_SGF} = DMP_mant_SFG_SWR + DmP_mant_SFG_SWR;\n                   end\n          1'b1  : begin\n                      {Carry_out_SGF, Raw_mant_SGF} = DMP_mant_SFG_SWR - DmP_mant_SFG_SWR;\n                   end\n          default: begin\n                      {Carry_out_SGF, Raw_mant_SGF} = DMP_mant_SFG_SWR + DmP_mant_SFG_SWR;\n                   end\n       endcase\n  end\n\tassign ADD_OVRFLW_SGF = Carry_out_SGF&(~OP_FLAG_SFG);\n\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n/////////////////////////////////////////SIXTH STAGE \"NRM\" ////////////////////////////\n/////////////////////////////////// PIPELINE REGISTER = NRM /////////////////////////////\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n\n// RegisterAdd #(.W( )) NRM_STAGE(\n//         .clk(clk),\n//         .rst(rst),\n//         .load(SFG_ACTIVE),\n//         .D({Raw_mant_SGF, DMP_exp_SFG, ADD_OVRFLW_SGF, SIGN_FLAG_SFG, ZERO_FLAG_SFG, SFG_ACTIVE}),\n//         .Q({Raw_mant_NRM_SWR, DMP_exp_NRM_EW, ADD_OVRFLW_NRM, SIGN_FLAG_NRM, ZERO_FLAG_NRM, NRM_ACTIVE})\n//         );\n\n  RegisterAdd #(.W(SWR)) NRM_STAGE_Raw_mant (\n  .clk(clk),\n  .rst(rst),\n  .load(SFG_ACTIVE),\n  .D(Raw_mant_SGF),\n  .Q(Raw_mant_NRM_SWR));\n\n  RegisterAdd #(.W(EW)) NRM_STAGE_DMP_exp (\n  .clk(clk),\n  .rst(rst),\n  .load(SFG_ACTIVE),\n  .D(DMP_exp_SFG),\n  .Q(DMP_exp_NRM_EW));\n\n  RegisterAdd #(.W(3)) NRM_STAGE_FLAGS (\n  .clk(clk),\n  .rst(rst),\n  .load(SFG_ACTIVE),\n  .D({ADD_OVRFLW_SGF, SIGN_FLAG_SFG, ZERO_FLAG_SFG}),\n  .Q({ADD_OVRFLW_NRM, SIGN_FLAG_NRM, ZERO_FLAG_NRM}));\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n\n//////////////////////////////----------------------------------///////////////////////////////\n//assign mux_out = (sel) ? din_1 : din_0;\n\n\n\nassign Add_Subt_LZD_SWR = ~Raw_mant_NRM_SWR;\n\n/////////////////////////LZD BEGIN////////////////////////////\n\ngenerate\n\t\tcase (SWR)\n\t\t\t26:begin : LZD_SINGLE\n\t\t\t\tPriority_Codec_32 Codec_32(\n\t\t\t\t\t.Data_Dec_i(Add_Subt_LZD_SWR),\n\t\t\t\t\t.Data_Bin_o(LZD_raw_out_EWR)\n\t\t\t\t\t);\n\t\t\t\tend\n\t\t\t55:begin : LZD_DOUBLE\n\t\t\t\tPriority_Codec_64 Codec_64(\n\t\t\t\t\t.Data_Dec_i(Add_Subt_LZD_SWR),\n\t\t\t\t\t.Data_Bin_o(LZD_raw_out_EWR)\n\t\t\t\t\t);\n\t\t\t\tend\n\t\tendcase\n\nendgenerate\n\n\n\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n/////////////////////////////////////////SEVENTH STAGE \"FRMT\" ////////////////////////////\n/////////////////////////////////// PIPELINE REGISTER = FRMT /////////////////////////////\n\n//////////////////////////////----------------------------------///////////////////////////////\n\n\n\n// NO REGISTER FOR THIS STAGE, BECAUSE WE RECYCLE THE BARREL SHIFTER\n\n\n\n//////////////////////////////----------------------------------///////////////////////////////\n//////////////////////////////----------------------------------///////////////////////////////\n\n\n\n\tFRMT_STAGE #(.W(W),.EW(EW),.SW(SW)) inst_FRMT_STAGE (\n\t\t\t.overflow_flag    (OVRFLW_FLAG_FRMT ),\n\t\t\t.underflow_flag   (UNDRFLW_FLAG_FRMT),\n\t\t\t.sign_i           (SIGN_FLAG_SHT1SHT2),\n\t\t\t.exp_ieee_i       (exp_rslt_NRM2_EW1[EW-1:0]),\n\t\t\t.sgf_ieee_i       (sftr_odat_SHT2_SWR[SWR-2:2]),\n\t\t\t.formatted_number (formatted_number_W)\n\t\t);\n\n//////////////////////////////-------------------------------------///////////////////////////////\n\n/////////////////////////////////////////EIGHT STAGE \"DATAO\" ////////////////////////////\n/////////////////////////////////// PIPELINE REGISTER = DATAO /////////////////////////////\n\n//////////////////////////////-------------------------------------///////////////////////////////\n  assign {INPUT_ACTIVE,\n          EXP_ACTIVE,\n          SHT1_ACTIVE,\n          SHT2_ACTIVE,\n          SFG_ACTIVE,\n          NRM_ACTIVE,\n          NRM2_ACTIVE} = Shift_reg_FLAGS_7;\n\nassign busy = SHT1_ACTIVE;\n\n  RegisterAdd #(.W(W)) FRMT_STAGE_DATAOUT (\n  .clk(clk),\n  .rst(rst),\n  .load(NRM2_ACTIVE),\n  .D(formatted_number_W),\n  .Q(final_result_ieee)\n  );\n\n  RegisterAdd #(.W(3)) FRMT_STAGE_FLAGS (\n  .clk(clk),\n  .rst(rst),\n  .load(NRM2_ACTIVE),\n  .D({OVRFLW_FLAG_FRMT,UNDRFLW_FLAG_FRMT, ZERO_FLAG_SHT1SHT2}),\n  .Q({overflow_flag   , underflow_flag  , zero_flag     })\n  );\n\n  RegisterAdd #(.W(1)) Ready_reg (\n  .clk(clk),\n  .rst(rst),\n  .load(1),\n  .D(NRM2_ACTIVE),\n  .Q(ready));\n\n//////////////////////////////----------------------------------///////////////////////////////\n//////////////////////////////----------------------------------///////////////////////////////\n\n\nendmodule\n\n",
			"file": "/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FPU_ADD_Substract_PIPELINED.v",
			"file_size": 24860,
			"file_write_time": 131195589852555577,
			"settings":
			{
				"buffer_size": 24855,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/new/Testbench_FPU_multiplication.v",
			"settings":
			{
				"buffer_size": 4541,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 319.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: forg"
			],
			[
				"package",
				"Package Control: Enable Package"
			]
		],
		"width": 402.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/jorge/Documents/Karatsuba_FPU/Proyectos",
		"/home/jorge/Funcionales",
		"/home/jorge/Francis",
		"/home/jorge/Jeffrey/CORDICO/CORDICO.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/CORDIC_Arch2.v",
		"/home/jorge/Jeffrey/CORDICO/CORDICO.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/CORDIC_FSM_v2.v",
		"/home/jorge/Jeffrey/CORDICO/CORDICO.srcs/sources_1/new/CORDIC_Arch3.v",
		"/home/jorge/Jeffrey/CORDICO/CORDICO.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/FPU_Interface_and_NaN/FPU_Interface.v",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/new/Testbench_Sgf_multiplication.v",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/imports/sim/testbench_RKOA.v",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/sources_1/new/CORDIC_Arch3.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/FPSUB/FPADDFPSUB_Pipelined/FPADDFPSUB_Pipelined.srcs/sources_1/imports/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FPU_ADD_Substract_PIPELINED.v",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sim_1/imports/Pipeline_FPADD_sourcefiles/tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/FPADDFPSUB_Pipelined/FPADDFPSUB_Pipelined.srcs/constrs_1/new/Time_Constrains.xdc",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/vector_simulation_add/imports/Pipeline_FPADD_sourcefiles/tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v",
		"/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/tb_FPU_PIPELINED_FPADDSUB.v",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Pipeline_FPADD_sourcefiles/shift_reg.v",
		"/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/shift_reg.v",
		"/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/b_shifter_1.v",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sim_double_fpaddsub/imports/TXTVerification_v3/Hexadecimal_A.txt",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/bloody_simruns/imports/behav/Hexadecimal_A.txt",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/constrs_1/imports/RTL/Nexys4_Master.xdc",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.sim/bloody_simruns/behav/output_log.py",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/vector_simulation_add/imports/behav/Hexadecimal_B.txt",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sim_1/imports/Proyecto_De_Graduacion/TXTVerification/Hexadecimal_B.txt",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.sim/vector_simulation_add/behav/output_log.txt",
		"/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.sim/vector_simulation_add/behav/output_log.py",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sim_1/new/Testbench_FPU_Add_Subt.v",
		"/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/display.log",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sim_1/imports/Pipeline_FPADD_sourcefiles/shift_reg.v",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/project_1/archive_project_summary.txt",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Oper_Start_In.v",
		"/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FORMATTER.v",
		"/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/Tenth_Phase_v2.v",
		"/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/task_FPADD_FPSUB.v",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_FUNCIONAL_v1/ADD_SUB_FUNCIONAL_v1.srcs/sim_1/new/Testbench_FPU_Add_Subt.v",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Comparators.v",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/RegisterAdd.v",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Barrel_shifter.v",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Mux_Array.v",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/FPU_Add_Subtract_Function.v",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/LZD.v",
		"/home/jorge/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/Shift_left_logical.v",
		"/home/jorge/.config/sublime-text-3/Packages/User/usersnippet_verilogregister.sublime-snippet",
		"/home/jorge/.config/sublime-text-3/Packages/User/usersnippet_verilog.sublime-snippet",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Greater_Comparator.v",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/exp_operation.v",
		"/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/RegisterAdd.v",
		"/home/jorge/.config/sublime-text-3/Packages/User/usersnippet_verilogcase3b.sublime-snippet",
		"/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Add_Subt.v",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/FPU_Add_Subtract_Function.v",
		"/home/jorge/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
		"/home/jorge/.config/sublime-text-3/Packages/Package Control/Package Control.sublime-settings",
		"/home/jorge/.config/sublime-text-3/Packages/User/Distraction Free.sublime-settings",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/FSM_Add_Subtract.v",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/Barrel_Shifter_M.v",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Multiplexer_AC.v",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/sim_1/imports/Sim/Sine_Cosine_CORDIC_tb.v",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/sources_1/imports/new/Testbench_FPU_Add_Subt.v",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/LUT_ROM_64bits.v",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/sim_1/new/Testbench_LUT.v",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/LUT_ROM_32bits.v",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/counter_d.v",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/sim_1/new/testbench_CORDICArch2.v",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/CORDIC_Arch2.v",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.sim/CORDIC_COS_32bits_round00/behav/CORDIC32_input_angles_dec.txt",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/CORDIC_COS_32bits_round00/imports/COSENO",
		"/home/jorge/TESTING",
		"/home/jorge/FILES/CORDIC32_input_angles_dec.txt",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/LUT_sincos_32.txt",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/sim_1/imports/ADD_SUB_Files/Hexadecimal_R.txt",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/d_ff_en.v",
		"/home/jorge/Documents/Karatsuba_FPU/CORDICO/CORDICO.srcs/sim_1/new/tb_CORDIC_Arch2.v",
		"/home/jorge/.config/sublime-text-3/Packages/Verilog Gadget/Verilog Gadget.sublime-settings",
		"/home/jorge/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/jorge/.config/sublime-text-3/Packages/Verilog Gadget/Default (Linux).sublime-keymap",
		"/home/jorge/.config/sublime-text-3/Packages/Verilog Automatic/README.md",
		"/home/jorge/.config/sublime-text-3/Packages/User/Verilog Automatic.sublime-settings",
		"/home/jorge/.config/sublime-text-3/Packages/Verilog Automatic/Verilog Automatic.sublime-settings",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/imports/rtl/KOA_c_v2.v",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Add_Subt.v",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/source/rtl/KOA_c_v3.v",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/FPU_Multiplication_Function.v",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/Sgf_Multiplication.v",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/FPU_Multiplication_Function.v",
		"/home/jorge/.config/sublime-text-3/Packages/Verilog Automatic/Default (Linux).sublime-keymap",
		"/home/jorge/.config/sublime-text-3/Packages/User/Verilog.sublime-settings",
		"/home/jorge/.config/sublime-text-3/Packages/User/JSON.sublime-settings"
	],
	"find":
	{
		"height": 22.0
	},
	"find_in_files":
	{
		"height": 136.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"enable_Pipeline_input",
			"FSM",
			"SIGN_FLAG_SHT1SHT2",
			"SIGN",
			"Exp_oper_1_EWR",
			"SIGN",
			"raw_Mantissa_SWR1",
			"Array_IN_3",
			"Array_IN_2",
			"fclose",
			"uut",
			"logVectorReference",
			"FPU_PIPELINED_FPADDSUB",
			"SIGN_FLAG_INIT",
			"sign_",
			"sign",
			"%8h",
			"%23h",
			"%26h",
			"%h",
			"\",",
			"\")",
			"\"",
			"\");",
			"FileSaveData",
			"$fwrite(\"",
			"display",
			")\n",
			"add_subt",
			"Shift_reg_FLAGS_7",
			"Shift_reg_FLAGS_6",
			"INPUT_ACTIVE",
			"ready",
			"Shift_reg_FLAGS_6",
			"FLAGS_OR",
			"Shift_reg_FLAGS",
			"LZD_raw_val_EWR",
			"SIGN_FLAG_SHT2",
			"ADD_OVRFLW_FRMT",
			"SIGN_FLAG_SHT1SHT2",
			"enable_input_internal",
			"ack_FSM",
			"beg_FSM",
			";\n",
			"ADD_OVRFLW_NRM",
			"ADD_OVRFLW",
			"Mantissa_M_SWR",
			"raw_Mantissa_SWR",
			"exp_oper_result",
			"LZD_raw_val_EWR",
			"Raw_mant_SGF",
			"Exponent_M_EW",
			"Mantissa_M_SW",
			"real_sign",
			"si",
			"Data_X",
			"add_subt",
			"enable_Pipeline_input",
			"task",
			"raw_Mantissa_SWR1",
			"exp_mux_D1",
			"Mantissa_M_SWR",
			"Mantissa_m_SWR",
			"raw_Mantissa_SWR1",
			"raw_Mantissa_SWR",
			"formatted_number",
			"DMP_EXP_EWSW",
			"intDY_W1",
			"intDX_W1",
			"intDY_W",
			"intDX_W",
			"formatted_number",
			"LZD_raw_output",
			"LZD_raw_output_NRM2",
			"LZD_output_NRM2",
			"Raw_mant_NRM",
			"Add_Subt_LZD",
			"DMP_exp_NRM",
			"DMP_mant_SFG",
			"DmP_mant_SFG",
			"DMP_exp_NRM2",
			"ADDSUB_exp_operand",
			"exp_rslt_NRM2",
			"Exp_oper_1",
			"sftr_odat_SHT2",
			"sftr_idat_SHT2",
			"shift_value_SHT2",
			"DMP_SHT2",
			"Data_array",
			"mux_sel_norm",
			"sftr_odat_SHT1",
			"sftr_idat_SHT1",
			"shft_value_mux_o",
			"Shift_amount_SHT1",
			"DmP_mant_SHT1",
			"DMP_SHT1",
			"b_shifter_one",
			"Shift_amount_EXP",
			"DmP_mant_EXP",
			"DMP_mant_EXP",
			"DmP_exp_EXP",
			"DMP_exp_EXP",
			"DmP_EXP",
			"DMP_EXP",
			"DmP_INIT_W_2",
			"DMP_INIT_W_2",
			"DmP_INIT",
			"DMP_INIT",
			"intDY",
			"intDX",
			"ADD_OVRFLW_FRMT",
			"ADD_OVRFLW_NRM",
			"ADD_OVRFLW_SGF",
			"add_ov",
			"LZD_raw_val_EW",
			"LZD_raw_val_EWR",
			"LZD_raw_val",
			"LZD_raw_output",
			"Exponent_diff",
			"Exponent_m",
			"Exponent_M",
			"Mantissa_m",
			"Mantissa_M",
			"Mantissa2",
			"Mantissa1",
			"Operand2",
			"Operand1",
			"Exponent2"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Exp_oper_1_EW",
			"uut",
			"0x%6h",
			"%0x6h",
			"0x%21h",
			"0x%24h",
			"0x%h",
			"\\n\",",
			"\\n\")",
			"\\n\"",
			"\"",
			"\n      $display(\"===============INIT STAGE: input signals============\");\n      $display(\"---------First Operator------------\");\n      $display(\"Mantissa = %23h, Exponent = %8h, sign = %d\", Mantissa1_SW, Exponent1_EW, Sign1);\n      $display(\"Mantissa = %b, Exponent = %b, sign = %b\", Mantissa1_SW, Exponent1_EW, Sign1);\n      $display(\"--------Second Operator------------\");\n      $display(\"Mantissa = %23h, Exponent = %8h, sign = %d\", Mantissa2_SW, Exponent2_EW, Sign2);\n      $display(\"Mantissa = %b, Exponent = %b, sign = %b\", Mantissa2_SW, Exponent2_EW, Sign2);\n",
			"\");",
			"\\n\");",
			"\");",
			"$fwrite(logVectorReference,\"",
			"fwrite",
			"Shift_reg_FLAGS_7",
			"Shift_reg_FLAGS_6",
			"Shift_reg_FLAGS",
			"ADD_OVRFLW_NRM2",
			"ADD_OVRFLW_FRMT",
			"enable_input_internal",
			"//ack_FSM",
			"beg_OP",
			"DMP_INIT_EWSW",
			"intDY_EWSW",
			"intDY_W1",
			"intDX_EWSW",
			"intDX_W1",
			"intDY_W1",
			"intDY_W",
			"intDX_W1",
			"intDX_W",
			"formatted_number_W",
			"formatted_number",
			"LZD_raw_out_EWR",
			"LZD_raw_output",
			"LZD_raw_out_NRM2_EWR",
			"LZD_raw_output_NRM2",
			"LZD_output_NRM2_EW",
			"LZD_output_NRM2",
			"Raw_mant_NRM_SWR",
			"Raw_mant_NRM",
			"wire [SWR-1:0] Raw_mant_NRM;\n",
			"Add_Subt_LZD_SWR",
			"Add_Subt_LZD",
			"DMP_exp_NRM_EW",
			"DMP_exp_NRM",
			"DMP_mant_SFG_SWR",
			"DmP_mant_SFG_SWR",
			"DmP_mant_SFG",
			"DMP_exp_NRM2_EW",
			"DMP_exp_NRM2",
			"ADDSUB_exp_operand_EW",
			"ADDSUB_exp_operand",
			"exp_rslt_NRM2_EW1",
			"exp_rslt_NRM2",
			"Exp_oper_1_EWR",
			"Exp_oper_1",
			"sftr_odat_SHT2_SWR",
			"sftr_odat_SHT2",
			"sftr_idat_SHT2_SWR",
			"sftr_idat_SHT2",
			"shift_value_SHT2_EWR",
			"shift_value_SHT2",
			"DMP_SHT2_EWSW",
			"DMP_SHT2",
			"Data_array_SWR",
			"Data_array",
			"mux_sel_norm_EWR",
			"mux_sel_norm",
			"sftr_odat_SHT1_SWR",
			"sftr_odat_SHT1",
			"sftr_idat_SHT1_SWR",
			"sftr_idat_SHT1",
			"shft_value_mux_o_EWR",
			"shft_value_mux_o",
			"Shift_amount_SHT1_EWR",
			"Shift_amount_SHT1",
			"DmP_mant_SHT1_SW",
			"DmP_mant_SHT1",
			"DMP_SHT1_EWSW",
			"DMP_SHT1",
			"b_shifter_one_SWR",
			"b_shifter_one",
			"Shift_amount_EXP_EW",
			"Shift_amount_EXP",
			"DmP_mant_EXP_SW",
			"DMP_mant_EXP_SW",
			"DMP_mant_EXP",
			"DmP_exp_EXP_EW",
			"DMP_exp_EXP_EW",
			"DMP_exp_EXP",
			"DmP_EXP_EWSW",
			"DmP_EXP",
			"wire [W-2:0] DMP_EXP_EWSW, DmP_EXP;\n",
			"DMP_EXP_EWSW",
			"DMP_EXP",
			"DmP_INIT_EWSW",
			"DMP_EXP_EWSW",
			"DmP_INIT_W_2",
			"DMP_INIT_W_2",
			"DMP_INIT_W.2",
			"DMP_INIT",
			"DMP_INIT_W_2",
			"DMP_INIT",
			"intDY_W",
			"intDX_W",
			"intDX",
			"LZD_raw_val_EWR",
			"LZD_raw_val_EW",
			"Exponent_diff_EW",
			"Exponent_m_EW",
			"Exponent_M_EW",
			"Mantissa_m_SW",
			"Mantissa_M_SW",
			"Mantissa2_SW",
			"Mantissa1_SW",
			"Operand2_W",
			"Operand1_W",
			"Exponent2_EW",
			"Exponent1_EW",
			"raw_Mantissa_SWR",
			"shft_value_mux_o",
			";",
			"EW",
			"UNDRFLW_FLAG_FRMT"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 34,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "source/rtl/FPU_Multiplication_Function_v2.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8447,
						"regions":
						{
						},
						"selection":
						[
							[
								495,
								495
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 70.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/constrs_1/imports/RTL/Nexys4_Master.xdc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37288,
						"regions":
						{
						},
						"selection":
						[
							[
								36804,
								36804
							]
						],
						"settings":
						{
							"syntax": "Packages/TCL/Tcl.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 10220.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/constrs_1/new/Time_Constrains.xdc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2594,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/TCL/Tcl.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/FPU_Multiplication_Function.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8367,
						"regions":
						{
						},
						"selection":
						[
							[
								6956,
								6956
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4900.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/FPU_Add_Subtract_Function.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12654,
						"regions":
						{
						},
						"selection":
						[
							[
								8872,
								8872
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4746.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/exp_operation.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2050,
						"regions":
						{
						},
						"selection":
						[
							[
								1584,
								1584
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 954.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Tenth_Phase.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2485,
						"regions":
						{
						},
						"selection":
						[
							[
								479,
								479
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 424.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/FSM_Add_Subtract.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8944,
						"regions":
						{
						},
						"selection":
						[
							[
								1530,
								1530
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5334.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/FPU_Add_Subtract_Function.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12627,
						"regions":
						{
						},
						"selection":
						[
							[
								12513,
								12513
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6203.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sim_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Priority_Codec_32.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2322,
						"regions":
						{
						},
						"selection":
						[
							[
								483,
								483
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 280.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Add_Subt.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2538,
						"regions":
						{
						},
						"selection":
						[
							[
								1543,
								1543
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 649.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/add_sub_carry_out.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 815,
						"regions":
						{
						},
						"selection":
						[
							[
								549,
								549
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/b_shifter_2.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1768,
						"regions":
						{
						},
						"selection":
						[
							[
								762,
								762
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 504.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/RegisterAdd.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 818,
						"regions":
						{
						},
						"selection":
						[
							[
								761,
								761
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 100.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/MultiplexTxT.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 994,
						"regions":
						{
						},
						"selection":
						[
							[
								993,
								993
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 156.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Mux_3x1.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 799,
						"regions":
						{
						},
						"selection":
						[
							[
								657,
								657
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/fpuuart/FPU_UART.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4370,
						"regions":
						{
						},
						"selection":
						[
							[
								474,
								474
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/shift_mux.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1224,
						"regions":
						{
						},
						"selection":
						[
							[
								956,
								956
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 337.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/Round_decoder_M.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 980,
						"regions":
						{
						},
						"selection":
						[
							[
								525,
								525
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/OR_Module.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 856,
						"regions":
						{
						},
						"selection":
						[
							[
								845,
								845
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "source/rtl/RecursiveKOA.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2468,
						"regions":
						{
						},
						"selection":
						[
							[
								535,
								535
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 117.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/FSM_Mult_Function.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5817,
						"regions":
						{
						},
						"selection":
						[
							[
								5817,
								5817
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4060.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/imports/rtl/RecursiveKOA.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2461,
						"regions":
						{
						},
						"selection":
						[
							[
								1504,
								1504
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/imports/rtl/KOA_c_v3.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6790,
						"regions":
						{
						},
						"selection":
						[
							[
								4732,
								4732
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1036.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "source/rtl/KOA_c_v2.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9722,
						"regions":
						{
						},
						"selection":
						[
							[
								9722,
								9722
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 561.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/imports/rtl/KOA_c_v2.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9722,
						"regions":
						{
						},
						"selection":
						[
							[
								1081,
								1081
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3044.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Mult/Sgf_Multiplication.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10589,
						"regions":
						{
						},
						"selection":
						[
							[
								779,
								779
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 317.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/Multiplexer_AC.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 754,
						"regions":
						{
						},
						"selection":
						[
							[
								482,
								482
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.sim/bloody_simruns/behav/output_log.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2464.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FSM_input_enable.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3019,
						"regions":
						{
						},
						"selection":
						[
							[
								2965,
								2965
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2207.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/bloody_simruns/imports/Pipeline_FPADD_sourcefiles/tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35125,
						"regions":
						{
						},
						"selection":
						[
							[
								2254,
								2254
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 456.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sim_1/imports/Pipeline_FPADD_sourcefiles/FPU_ADD_Substract_PIPELINED.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24534,
						"regions":
						{
						},
						"selection":
						[
							[
								23855,
								23855
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 62.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/sgn_result.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 930,
						"regions":
						{
						},
						"selection":
						[
							[
								476,
								476
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Add_Sub/ADD_SUB_PIPELINED/ADD_SUB_FUNCIONAL_v1.srcs/sources_1/imports/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FPU_ADD_Substract_PIPELINED.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24854,
						"regions":
						{
						},
						"selection":
						[
							[
								1515,
								1515
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 126.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FPU_ADD_Substract_PIPELINED.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24855,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
									[
										24534,
										24534
									]
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								1514,
								1514
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 336.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 35,
					"file": "MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/new/Testbench_FPU_multiplication.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4541,
						"regions":
						{
						},
						"selection":
						[
							[
								2458,
								2458
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1864.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 48.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.12014740705,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 116.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FPU_ADD_Substract_PIPELINED.v"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 322.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Add_Subt"
			]
		],
		"width": 314.0
	},
	"selected_group": 1,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		]
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 314.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 2
	}
}
